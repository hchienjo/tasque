<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" InitialTargets="_CheckProperties;_GetSrcDir" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <BuildingSolutionFile>True</BuildingSolutionFile>

    <!-- Global dirs -->
    <OutputPath>.</OutputPath>
    <Prefix Condition=" '$(Prefix)' == '' ">$(MSBuildProjectDirectory)\$(RelPrefix)</Prefix>
    <SrcDir Condition=" '$(SrcDir)' == '' ">.</SrcDir>
    <!-- TopBuildDir is usually TopSrcDir, hence default to TopSrcDir -->
    <TopBuildDir Condition=" '$(TopBuildDir)' == '' ">$(TopSrcDir)</TopBuildDir>
    <PoSrcDir Condition=" '$(PoSrcDir)' == '' ">$(AbsTopSrcDir)\po</PoSrcDir>
    <PoBuildDir Condition=" '$(PoBuildDir)' == '' ">$(TopBuildDir)\po</PoBuildDir>
    <LibDir Condition=" '$(LibDir)' == '' ">$(Prefix)\lib</LibDir>
    <BinDir Condition=" '$(BinDir)' == '' ">$(Prefix)\bin</BinDir>
    <PkgLibDir Condition=" '$(PkgLibDir)' == '' ">$(LibDir)\$(PackageName)</PkgLibDir>
    <DataDir Condition=" '$(DataDir)' == '' ">$(Prefix)\share</DataDir>
    <PkgDataDir Condition=" '$(PkgDataDir)' == '' ">$(DataDir)\$(PackageName)</PkgDataDir>
    <PkgConfigDir Condition=" '$(PkgConfigDir)' == '' ">$(LibDir)\pkgconfig</PkgConfigDir>
    <DestDir Condition=" '$(DestDir)' != '' And !HasTrailingSlash('$(DestDir)')">$(DestDir)\</DestDir>
    <Wrapper Condition=" '$(Wrapper)' == '' ">$(PackageName)</Wrapper>
    <Version Condition=" '$(Version)' == '' ">1.0.0</Version>
    
    <!-- Icon and sound dirs -->
    <HiColorDir Condition=" '$(HiColorDir)' == '' ">$(DataDir)\icons\hicolor</HiColorDir>
    <PkgHiColorDir Condition=" '$(PkgHiColorDir)' == '' ">$(PkgDataDir)\icons\hicolor</PkgHiColorDir>
    <PixmapDir Condition=" '$(PixmapDir)' == '' ">$(DataDir)\pixmaps</PixmapDir>
    <PkgSoundsDir Condition=" '$(PkgSoundsDir)' == '' ">$(PkgDataDir)\sounds</PkgSoundsDir>
    
    <!-- I18n dirs -->
    <LocaleDir Condition=" '$(LocaleDir)' == '' ">$(DataDir)\locale</LocaleDir>
  </PropertyGroup>
  <Choose>
    <When Condition=" '$(OS)' == 'Windows_NT' ">
      <PropertyGroup>
        <IntlToolMerge Condition=" '$(IntlToolMerge)' == '' ">$(MSBuildProgramFiles32)\GnuWin32\bin\intltool-merge.exe</IntlToolMerge>
        <IntlToolUpdate Condition=" '$(IntlToolUpdate)' == '' ">$(MSBuildProgramFiles32)\GnuWin32\bin\intltool-update.exe</IntlToolUpdate>
        <MsgFmt Condition=" '$(MsgFmt)' == '' ">$(MSBuildProgramFiles32)\GnuWin32\bin\msgfmt.exe</MsgFmt>
        <UpdateIconCache Condition=" '$(UpdateIconCache)' == '' ">$(MSBuildProgramFiles32)\GTK2-Runtime\bin\gtk-update-icon-cache.exe</UpdateIconCache>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <IntlToolMerge Condition=" '$(IntlToolMerge)' == '' ">intltool-merge</IntlToolMerge>
        <IntlToolUpdate Condition=" '$(IntlToolUpdate)' == '' ">intltool-update</IntlToolUpdate>
        <MsgFmt Condition=" '$(MsgFmt)' == '' ">msgfmt</MsgFmt>
        <UpdateIconCache Condition=" '$(UpdateIconCache)' == '' ">gtk-update-icon-cache</UpdateIconCache>
      </PropertyGroup>
    </Otherwise>
  </Choose>
  <ItemGroup>
    <Substitution Include="@prefix@|$(Prefix)|text" />
    <Substitution Include="@libdir@|$(LibDir)|text" />
    <Substitution Include="@pkglibdir@|$(PkgLibDir)|text" />
    <Substitution Include="@bindir@|$(BinDir)|text" />
    <Substitution Include="@exec_prefix@|$(BinDir)|text" />
    <Substitution Include="@datadir@|$(DataDir)|text" />
    <Substitution Include="@wrapper@|$(Wrapper)|text" />
    <Substitution Include="@version@|$(Version)|text" />
    <Substitution Include="@PACKAGE@|$(PackageName)|text" />
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <UsingTask TaskName="Tasque.Build.Substitute" AssemblyFile="build.dll" />
  <UsingTask TaskName="Tasque.Build.GetRelPath" AssemblyFile="build.dll" />
  <UsingTask TaskName="Tasque.Build.GetSrcDirStrip" AssemblyFile="build.dll" />
  <UsingTask TaskName="Tasque.Build.GetAbsSrcDir" AssemblyFile="build.dll" />
	
  <!-- Substitute -->
  <Target Name="Substitute" DependsOnTargets="BeforeSubstitute;CoreSubstitute;AfterSubstitute" />
  <Target Name="BeforeSubstitute" />
  <Target Name="AfterSubstitute" />
  <Target Name="CoreSubstitute" Condition=" '@(Substitute)' != '' ">
    <CreateItem Include="$(SrcDir)\%(Substitute.RelativeDir)%(FileName)%(Extension)">
      <Output TaskParameter="Include" ItemName="_SubstSourceFiles" />
    </CreateItem>
    <CreateItem Include="%(Substitute.RelativeDir)%(FileName)">
      <Output TaskParameter="Include" ItemName="_SubstDestFiles" />
    </CreateItem>
    <Substitute SourceFiles="@(_SubstSourceFiles)" DestinationFiles="@(_SubstDestFiles)" Substitutions="@(Substitution)" />
  </Target>
  
  <!-- Translate -->
  <Target Name="Translate" DependsOnTargets="BeforeTranslate;CoreTranslate;AfterTranslate" />
  <Target Name="BeforeTranslate" />
  <Target Name="AfterTranslate" />
  <Target Name="CoreTranslate" Condition=" '@(Translate)' != '' ">
    <Exec Command="LC_ALL=C $(IntlToolMerge) -d -u -c $(PoBuildDir)\.intltool-merge-cache $(PoSrcDir) $(SrcDir)\%(Translate.RelativeDir)%(FileName)%(Extension) %(RelativeDir)%(FileName)" />
  </Target>
  
  <!-- Compile translations -->
  <Target Name="GettextCompile" Condition=" '@(GettextCompile)' != '' ">
    <Exec Command="$(MsgFmt) -o %(FileName).gmo $(PoSrcDir)\@(GettextCompile)" />
  </Target>
  
  <!-- Build -->
  <!-- Switch between regular targets and alternative targets -->
  <PropertyGroup Condition=" '$(AltTarget)' != '' ">
    <BuildDependsOn>
      BeforeBuild;
      AfterBuild;
    </BuildDependsOn>
  </PropertyGroup>
  
  <PropertyGroup>
    <TasqueBuildDependsOn>
      Substitute;
      GettextCompile;
      Translate;
      BeforeTasqueBuild;
    </TasqueBuildDependsOn>
    <TasqueBuildDependsOn Condition=" '$(AltTarget)' != '' ">$(AltTarget)</TasqueBuildDependsOn>
  </PropertyGroup>

  <Target Name="BeforeBuild" DependsOnTargets="$(TasqueBuildDependsOn)" />
  <Target Name="BeforeTasqueBuild" />
  
  <!-- Clean -->
  <Target Name="AfterClean" DependsOnTargets="BeforeTasqueClean">
    <CreateItem Condition=" '@(Translate)' != '' " Include="%(Translate.RelativeDir)%(Translate.FileName)">
      <Output TaskParameter="Include" ItemName="TasqueCleanFile" />
    </CreateItem>
    <CreateItem Condition=" '@(Substitute)' != '' " Include="%(Substitute.RelativeDir)%(Substitute.FileName)">
      <Output TaskParameter="Include" ItemName="TasqueCleanFile" />
    </CreateItem>
    <CreateItem Condition=" '@(GettextCompile)' != '' " Include="%(GettextCompile.FileName).gmo">
      <Output TaskParameter="Include" ItemName="TasqueCleanFile" />
    </CreateItem>
    <Delete Files="@(TasqueCleanFile)" />
  </Target>
  <Target Name="BeforeTasqueClean" />
  
  <!-- Install -->
  <PropertyGroup>
    <InstallDependsOn>
      BeforeInstall;
      _SetupBinInstallFile;
      _SetupDataInstallFile;
      _SetupPoInstallFile;
      SetupInstallFile;
      CoreInstall;
      AfterInstall;
      _UpdateIconCache;
    </InstallDependsOn>
  </PropertyGroup>
  <Target Name="Install" DependsOnTargets="$(InstallDependsOn)" />
  <Target Name="BeforeInstall" />
  <Target Name="AfterInstall" />
  <Target Name="CoreInstall">
    <Copy SourceFiles="@(InstallFile)" DestinationFiles="$(DestDir)%(InstallPath)\%(InstallFileName)" SkipUnchangedFiles="true" />
  </Target>
  
  <!-- Hook for consuming projects to register extra files for install -->
  <Target Name="SetupInstallFile" />
  
  <!-- Uninstall -->
  <PropertyGroup>
    <UninstallDependsOn>
      BeforeUninstall;
      _SetupBinInstallFile;
      _SetupDataInstallFile;
      _SetupPoInstallFile;
      SetupInstallFile;
      CoreUninstall;
      AfterUninstall;
      _UpdateIconCache;
    </UninstallDependsOn>
  </PropertyGroup>
  <Target Name="Uninstall" DependsOnTargets="$(UninstallDependsOn)" />
  <Target Name="BeforeUninstall" />
  <Target Name="AfterUninstall" />
  <Target Name="CoreUninstall">
    <Delete Files="$(DestDir)%(InstallFile.InstallPath)\%(InstallFileName)" />
  </Target>
  
  <!-- Dist -->
  <Target Name="Dist">
    <Message Text="DistDir=$(DistDir)" />
    <Error Condition=" '$(DistDir)' == '' " Text="Property DistDir not set. Target Dist requires DistDir to be set." />
    <CreateItem Include="*.csproj;@(TasqueCompile)">
      <Output TaskParameter="Include" ItemName="DistFile" />
    </CreateItem>
    <Message Text="@(DistFile)" />
    <Copy SourceFiles="$(SrcDir)\%(DistFile.RelativeDir)%(FileName)%(Extension)" DestinationFiles="$(DistDir)\%(DistFile.RelativeDir)%(FileName)%(Extension)" SkipUnchangedFiles="true" />
  </Target>
  
  <!-- Distclean -->
  <Target Name="DistClean" DependsOnTargets="Clean">
    <CreateItem Include="Makefile;*.csp">
      <Output TaskParameter="Include" ItemName="DistCleanFile" />
    </CreateItem>
    <Delete Files="%(DistCleanFile.RelativeDir)%(FileName)%(Extension)" />
  </Target>
   
  <!-- Private -->
  <Target Name="_CheckProperties">
    <Error Condition=" '$(PackageName)' == '' " Text="PackageName is not set." />
    <Error Condition=" '$(TopSrcDir)' == '' " Text="TopSrcDir is not set." />
    <Error Condition=" '$(RelPrefix)' == '' " Text="RelPrefix is not set." />
    <Message Text="Prefix=$(Prefix)" />
  </Target>

  <Target Name="_GetSrcDirStrip">
    <GetSrcDirStrip MSBuildProjectDir="$(MSBuildProjectDirectory)" AbsTopBuildDir="$(AbsTopBuildDir)">
      <Output TaskParameter="SrcDirStrip" PropertyName="SrcDirStrip" />
    </GetSrcDirStrip>
    <Message Text="SrcDirStrip=$(SrcDirStrip)" />
  </Target>

  <Target Name="_GetSrcDir" Condition=" '$(AbsTopSrcDir)' != '$(AbsTopBuildDir)' "
      DependsOnTargets="_GetSrcDirStrip">
    <Message Text="AbsTopSrcDir=$(AbsTopSrcDir)" />
    <Message Text="AbsTopBuildDir=$(AbsTopBuildDir)" />
    <Message Text="MSBuildProjectDirectory=$(MSBuildProjectDirectory)" />
    <GetAbsSrcDir AbsTopSrcDir="$(AbsTopSrcDir)" SrcDirStrip="$(SrcDirStrip)">
      <Output TaskParameter="AbsSrcDir" PropertyName="AbsSrcDir" />
    </GetAbsSrcDir>
    <GetRelPath FromPath="$(MSBuildProjectDirectory)" ToPath="$(AbsSrcDir)">
      <Output TaskParameter="RelativePath" PropertyName="SrcDir" />
    </GetRelPath>
    <Message Text="SrcDir=$(SrcDir)" />
  </Target>
  
  <Target Name="_SetupBinInstallFile">
    <Message Text="$(TargetFileName)" />
    <CreateItem Include="$(TargetFileName)" AdditionalMetadata="InstallPath=$(PkgLibDir);InstallFileName=$(TargetFileName)">
      <Output TaskParameter="Include" ItemName="InstallFile" />
    </CreateItem>
    <CreateItem Condition="Exists('$(TargetFileName).mdb')" Include="$(TargetFileName).mdb"
        AdditionalMetadata="InstallPath=$(PkgLibDir);InstallFileName=$(TargetFileName).mdb">
      <Output TaskParameter="Include" ItemName="InstallFile" />
    </CreateItem>
  </Target>
  
  <Target Name="_SetupDataInstallFile">
    <CreateItem Condition=" '@(Icon)' != '' " Include="$(SrcDir)\%(Icon.Identity)"
        AdditionalMetadata="InstallPath=$(HiColorDir)\%(Size)\%(Context);InstallFileName=%(Name)">
      <Output TaskParameter="Include" ItemName="InstallFile" />
    </CreateItem>
    <CreateItem Condition=" '@(PkgIcon)' != '' " Include="$(SrcDir)\%(PkgIcon.Identity)"
        AdditionalMetadata="InstallPath=$(PkgHiColorDir)\%(Size)\%(Context);InstallFileName=%(Name)">
      <Output TaskParameter="Include" ItemName="InstallFile" />
    </CreateItem>
    <CreateItem Condition=" '@(Icon)' != '' And '%(Pixmaps)'" Include="$(SrcDir)\%(Icon.Identity)"
        AdditionalMetadata="InstallPath=$(PixmapDir);InstallFileName=%(FileName)%(Extension)">
      <Output TaskParameter="Include" ItemName="InstallFile" />
    </CreateItem>
    <CreateItem Condition=" '@(PkgSound)' != '' " Include="$(SrcDir)\%(PkgSound.Identity)"
        AdditionalMetadata="InstallPath=$(PkgSoundsDir);InstallFileName=%(FileName)%(Extension)">
      <Output TaskParameter="Include" ItemName="InstallFile" />
    </CreateItem>
  </Target>
  
  <Target Name="_SetupPoInstallFile" Condition=" '@(GettextCompile)' != '' ">
    <CreateItem Include="%(GettextCompile.FileName).gmo"
        AdditionalMetadata="InstallPath=$(LocaleDir)\%(GettextCompile.FileName)\LC_MESSAGES;InstallFileName=$(PackageName).mo" >
      <Output TaskParameter="Include" ItemName="InstallFile" />
    </CreateItem>
  </Target>
  
  <Target Name="_UpdateIconCache" Condition=" '@(Icon)' != '' Or '@(PkgIcon)' != '' ">
    <Exec Command="$(UpdateIconCache) -f -t $(HiColorDir)" IgnoreExitCode="true" />
    <Exec Command="$(UpdateIconCache) -f -t $(PkgHiColorDir)" IgnoreExitCode="true" />
  </Target>
</Project>
