<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" InitialTargets="_SetupInitialProperties" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="_SetupInitialProperties" DependsOnTargets="$(_SetupInitialPropertiesDependsOn)">
    <Error Condition=" '$(PackageName)' == '' " Text="PackageName is not set." />
    <Error Condition=" '$(AbsTopBuildDir)' == '' " Text="AbsTopBuildDir is not set." />
    
    <!-- Assume AbsTopSrcDir is the same as AbsTopBuildDir (usually is) -->
    <CreateProperty Condition=" '$(AbsTopSrcDir)' == '' " Value="$(AbsTopBuildDir)">
      <Output TaskParameter="Value" PropertyName="AbsTopSrcDir" />
    </CreateProperty>
    
    <!-- TopSrcDir: Get rel path for AbsTopSrcDir -->
    <GetRelPath FromPath="$(MSBuildProjectDirectory)" ToPath="$(AbsTopSrcDir)">
      <Output TaskParameter="RelativePath" PropertyName="TopSrcDir" />
    </GetRelPath>
    
    <!--
      Get src dir strip: The path fragment from TopSrcDir to SrcDir.
      This is the same as the fragment from AbsTopBuildDir to AbsBuildDir.
    -->
    <GetRelPath FromPath="$(AbsTopBuildDir)" ToPath="$(AbsBuildDir)">
      <Output TaskParameter="RelativePath" PropertyName="_SrcDirStrip" />
    </GetRelPath>
    
    <!-- AbsSrcDir -->
    <CreateProperty Value="$(AbsTopSrcDir)\$(_SrcDirStrip)">
      <Output TaskParameter="Value" PropertyName="AbsSrcDir" />
    </CreateProperty>
    
    <!-- SrcDir -->
    <NormalizePath Path="$(TopSrcDir)\$(_SrcDirStrip)">
      <Output TaskParameter="Path" PropertyName="SrcDir" />
    </NormalizePath>
    
    <!-- po dirs: Assume it's <top_level>/po -->
    <CreateProperty Condition=" '$(PoBuildDir)' == '' " Value="$(TopBuildDir)\po">
      <Output TaskParameter="Value" PropertyName="PoBuildDir" />
    </CreateProperty>
    <CreateProperty Condition=" '$(PoSrcDir)' == '' " Value="$(TopSrcDir)\po">
      <Output TaskParameter="Value" PropertyName="PoSrcDir" />
    </CreateProperty>
    
    <!-- Prefix defaults to <top_level>/build/bin -->
    <CreateProperty Condition=" '$(Prefix)' == '' " Value="$(AbsTopBuildDir)\build\bin">
      <Output TaskParameter="Value" PropertyName="Prefix" />
    </CreateProperty>
    
    <CreateProperty Condition=" '$(LibDir)' == '' " Value="$(Prefix)\lib">
      <Output TaskParameter="Value" PropertyName="LibDir" />
    </CreateProperty>
    <CreateProperty Condition=" '$(BinDir)' == '' " Value="$(Prefix)\bin">
      <Output TaskParameter="Value" PropertyName="BinDir" />
    </CreateProperty>
    <CreateProperty Condition=" '$(PkgLibDir)' == '' " Value="$(LibDir)\$(PackageName)">
      <Output TaskParameter="Value" PropertyName="PkgLibDir" />
    </CreateProperty>
    <CreateProperty Condition=" '$(DataDir)' == '' " Value="$(Prefix)\share">
      <Output TaskParameter="Value" PropertyName="DataDir" />
    </CreateProperty>
    <CreateProperty Condition=" '$(PkgDataDir)' == '' " Value="$(DataDir)\$(PackageName)">
      <Output TaskParameter="Value" PropertyName="PkgDataDir" />
    </CreateProperty>
    <CreateProperty Condition=" '$(PkgConfigDir)' == '' " Value="$(LibDir)\pkgconfig">
      <Output TaskParameter="Value" PropertyName="PkgConfigDir" />
    </CreateProperty>
    
    <!-- Icon and sound dirs -->
    <CreateProperty Condition=" '$(HiColorDir)' == '' " Value="$(DataDir)\icons\hicolor">
      <Output TaskParameter="Value" PropertyName="HiColorDir" />
    </CreateProperty>
    <CreateProperty Condition=" '$(PkgHiColorDir)' == '' " Value="$(PkgDataDir)\icons\hicolor">
      <Output TaskParameter="Value" PropertyName="PkgHiColorDir" />
    </CreateProperty>
    <CreateProperty Condition=" '$(PixmapDir)' == '' " Value="$(DataDir)\pixmaps">
      <Output TaskParameter="Value" PropertyName="PixmapDir" />
    </CreateProperty>
    <CreateProperty Condition=" '$(PkgSoundsDir)' == '' " Value="$(PkgDataDir)\sounds">
      <Output TaskParameter="Value" PropertyName="PkgSoundsDir" />
    </CreateProperty>
    
    <!-- I18n dirs -->
    <CreateProperty Condition=" '$(LocaleDir)' == '' " Value="$(DataDir)\locale">
      <Output TaskParameter="Value" PropertyName="LocaleDir" />
    </CreateProperty>
    
    <!-- Debug output -->
    <Message Text="AbsTopBuildDir=$(AbsTopBuildDir)" />
    <Message Text="AbsTopSrcDir=$(AbsTopSrcDir)" />
    <Message Text="TopBuildDir=$(TopBuildDir)" />
    <Message Text="TopSrcDir=$(TopSrcDir)" />
    <Message Text="AbsBuildDir=$(AbsBuildDir)" />
    <Message Text="AbsSrcDir=$(AbsSrcDir)" />
    <Message Text="BuildDir=$(BuildDir)" />
    <Message Text="SrcDir=$(SrcDir)" />
    <Message Text="PoBuildDir=$(PoBuildDir)" />
    <Message Text="PoSrcDir=$(PoSrcDir)" />
    
    <!-- Create subst items here -->
    <CreateItem Include="@prefix@|$(Prefix)|text">
      <Output TaskParameter="Include" ItemName="Substitution" />
    </CreateItem>
    <CreateItem Include="@libdir@|$(LibDir)|text">
      <Output TaskParameter="Include" ItemName="Substitution" />
    </CreateItem>
    <CreateItem Include="@pkglibdir@|$(PkgLibDir)|text">
      <Output TaskParameter="Include" ItemName="Substitution" />
    </CreateItem>
    <CreateItem Include="@bindir@|$(BinDir)|text">
      <Output TaskParameter="Include" ItemName="Substitution" />
    </CreateItem>
    <CreateItem Include="@exec_prefix@|$(BinDir)|text">
      <Output TaskParameter="Include" ItemName="Substitution" />
    </CreateItem>
    <CreateItem Include="@datadir@|$(DataDir)|text">
      <Output TaskParameter="Include" ItemName="Substitution" />
    </CreateItem>
    <CreateItem Include="@wrapper@|$(Wrapper)|text">
      <Output TaskParameter="Include" ItemName="Substitution" />
    </CreateItem>
    <CreateItem Include="@version@|$(Version)|text">
      <Output TaskParameter="Include" ItemName="Substitution" />
    </CreateItem>
    <CreateItem Include="@PACKAGE@|$(PackageName)|text">
      <Output TaskParameter="Include" ItemName="Substitution" />
    </CreateItem>
  </Target>
  
  <Target Name="_SetupInSlnBuild">
    <!-- Assume AbsTopBuildDir is the dir, where the sln resides -->
    <CreateProperty Condition=" '$(AbsTopBuildDir)' == '' " Value="$(SolutionDir)">
      <Output TaskParameter="Value" PropertyName="AbsTopBuildDir" />
    </CreateProperty>
    <!-- TopBuildDir: Get rel path for AbsTopBuildDir -->
    <GetRelPath FromPath="$(MSBuildProjectDirectory)" ToPath="$(AbsTopBuildDir)">
      <Output TaskParameter="RelativePath" PropertyName="TopBuildDir" />
    </GetRelPath>
  </Target>
  
  <Target Name="_SetupInOtherBuild">
    <!-- When SolutionDir property not set, resort to explicitly set TopBuildDir property in proj file -->
    <GetAbsPath Condition=" '$(AbsTopBuildDir)' == '' " Path="$(TopBuildDir)">
      <Output TaskParameter="AbsolutePath" PropertyName="AbsTopBuildDir" />
    </GetAbsPath>
  </Target>
  
  <!--
    Here we have to check if this is a solution build, or if it is a build-all-projects-in-the-solution build
    The latter is terrible, because it doesn't give us information about the root directory (SolutionDir). In
    such a case those information must be provided explicitly by each proj file, therefore each file has to
    define the properties PackageName and TopBuildDir if it is to be used with MD.
  -->
  <PropertyGroup>
    <!-- Solution build -->
    <_SetupInitialPropertiesDependsOn>_SetupInSlnBuild</_SetupInitialPropertiesDependsOn>
    <!-- Other build -->
    <_SetupInitialPropertiesDependsOn Condition=" '$(SolutionDir)' == '' ">_SetupInOtherBuild</_SetupInitialPropertiesDependsOn>
  </PropertyGroup>
  
  <PropertyGroup>
    <BuildingSolutionFile>True</BuildingSolutionFile>
    <BuildEnabled Condition=" '$(BuildEnabled)' == '' ">true</BuildEnabled>
    <AutoInstall Condition=" '$(AutoInstall)' == '' ">true</AutoInstall>
    <!-- if AltTarget is set, disable AutoInstall -->
    <AutoInstall Condition=" '$(AltTarget)' != '' ">false</AutoInstall>
    
    <!-- Package name defaults to solution name -->
    <PackageName Condition=" '$(PackageName)' == '' " >$(SolutionName)</PackageName>
    
    <!-- AbsBuildDir is current dir -->
    <AbsBuildDir>$(MSBuildProjectDirectory)</AbsBuildDir>
    <BuildDir>.</BuildDir>
    
    <!-- Output paths for build and install -->
    <OutputPath>.</OutputPath>

    <DestDir Condition=" '$(DestDir)' != '' And !HasTrailingSlash('$(DestDir)')">$(DestDir)\</DestDir>
    <Wrapper Condition=" '$(Wrapper)' == '' ">$(PackageName)</Wrapper>
    <Version Condition=" '$(Version)' == '' ">$(ReleaseVersion)</Version>
  </PropertyGroup>
  
  <Choose>
    <When Condition=" '$(OS)' == 'Windows_NT' ">
      <PropertyGroup>
        <IntlToolMerge Condition=" '$(IntlToolMerge)' == '' ">%22$(MSBuildProgramFiles32)\GnuWin32\bin\intltool-merge.exe%22</IntlToolMerge>
        <IntlToolUpdate Condition=" '$(IntlToolUpdate)' == '' ">%22$(MSBuildProgramFiles32)\GnuWin32\bin\intltool-update.exe%22</IntlToolUpdate>
        <MsgFmt Condition=" '$(MsgFmt)' == '' ">%22$(MSBuildProgramFiles32)\GnuWin32\bin\msgfmt.exe%22</MsgFmt>
        <UpdateIconCache Condition=" '$(UpdateIconCache)' == '' ">%22$(MSBuildProgramFiles32)\GTK2-Runtime\bin\gtk-update-icon-cache.exe%22</UpdateIconCache>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <IntlToolMerge Condition=" '$(IntlToolMerge)' == '' ">intltool-merge</IntlToolMerge>
        <IntlToolUpdate Condition=" '$(IntlToolUpdate)' == '' ">intltool-update</IntlToolUpdate>
        <MsgFmt Condition=" '$(MsgFmt)' == '' ">msgfmt</MsgFmt>
        <UpdateIconCache Condition=" '$(UpdateIconCache)' == '' ">gtk-update-icon-cache</UpdateIconCache>
      </PropertyGroup>
    </Otherwise>
  </Choose>
  
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <UsingTask TaskName="Tasque.Build.Substitute" AssemblyFile="build.dll" />
  <UsingTask TaskName="Tasque.Build.GetRelPath" AssemblyFile="build.dll" />
  <UsingTask TaskName="Tasque.Build.GetAbsPath" AssemblyFile="build.dll" />
  <UsingTask TaskName="Tasque.Build.GetAbsSrcDir" AssemblyFile="build.dll" />
  <UsingTask TaskName="Tasque.Build.NormalizePath" AssemblyFile="build.dll" />
  
  <!-- Substitute -->
  <Target Name="Substitute" DependsOnTargets="BeforeSubstitute;CoreSubstitute;AfterSubstitute" />
  <Target Name="BeforeSubstitute" />
  <Target Name="AfterSubstitute" />
  <Target Name="CoreSubstitute" Condition=" '@(Substitute)' != '' ">
    <CreateItem Include="$(SrcDir)\%(Substitute.RelativeDir)%(FileName)%(Extension)">
      <Output TaskParameter="Include" ItemName="_SubstSourceFiles" />
    </CreateItem>
    <CreateItem Include="%(Substitute.RelativeDir)%(FileName)">
      <Output TaskParameter="Include" ItemName="_SubstDestFiles" />
    </CreateItem>
    <Substitute SourceFiles="@(_SubstSourceFiles)" DestinationFiles="@(_SubstDestFiles)" Substitutions="@(Substitution)" />
  </Target>
  
  <!-- Translate -->
  <Target Name="Translate" DependsOnTargets="BeforeTranslate;CoreTranslate;AfterTranslate" />
  <Target Name="BeforeTranslate" />
  <Target Name="AfterTranslate" />
  <Target Name="CoreTranslate" Condition=" '@(Translate)' != '' ">
    <Exec Command="LC_ALL=C $(IntlToolMerge) -d -u -c $(PoBuildDir)\.intltool-merge-cache $(PoSrcDir) $(SrcDir)\%(Translate.RelativeDir)%(FileName)%(Extension) %(RelativeDir)%(FileName)" />
  </Target>
  
  <!-- Compile translations -->
  <Target Name="GettextCompile" Condition=" '@(GettextCompile)' != '' ">
    <Exec Command="$(MsgFmt) -o %(FileName).gmo $(PoSrcDir)\@(GettextCompile)" />
  </Target>
  
  <!-- Build -->
  <!-- Switch between regular targets and alternative targets -->
  <!-- CoreBuild is disable on AltTargets and if the consuming proj is a TranslationProject (which is not MSBuild conform) -->
  <PropertyGroup Condition=" '$(AltTarget)' != '' Or '$(ItemType)' == 'TranslationProject' ">
    <BuildDependsOn>
      BeforeBuild;
      AfterBuild;
    </BuildDependsOn>
  </PropertyGroup>
  
  <!-- Provide the possibility to opt out of build -->
  <PropertyGroup Condition=" !'$(BuildEnabled)' ">
    <BuildDependsOn></BuildDependsOn>
  </PropertyGroup>
  
  <PropertyGroup>
    <TasqueBuildDependsOn>
      Substitute;
      GettextCompile;
      Translate;
      BeforeTasqueBuild;
    </TasqueBuildDependsOn>
    <TasqueBuildDependsOn Condition=" '$(AltTarget)' != '' ">$(AltTarget)</TasqueBuildDependsOn>
  </PropertyGroup>

  <Target Name="BeforeBuild" DependsOnTargets="$(TasqueBuildDependsOn)" />
  <Target Name="BeforeTasqueBuild" />
  
  <PropertyGroup>
    <AfterBuildDependsOn>
      Install;
      AfterTasqueBuild;
    </AfterBuildDependsOn>
    <AfterBuildDependsOn Condition=" !'$(AutoInstall)' ">AfterTasqueBuild</AfterBuildDependsOn>
  </PropertyGroup>
  
  <Target Name="AfterBuild"  DependsOnTargets="$(AfterBuildDependsOn)" />
  <Target Name="AfterTasqueBuild" />
  
  <!-- Clean -->
  <PropertyGroup>
    <BeforeCleanDependsOn>
      BeforeTasqueClean;
      Uninstall;
    </BeforeCleanDependsOn>
    <BeforeCleanDependsOn Condition=" !'$(AutoInstall)' ">BeforeTasqueClean</BeforeCleanDependsOn>
  </PropertyGroup>
  
  <Target Name="BeforeClean" DependsOnTargets="$(BeforeCleanDependsOn)" />
  <Target Name="BeforeTasqueClean" />
  
  <Target Name="AfterClean">
    <CreateItem Condition=" '@(Translate)' != '' " Include="%(Translate.RelativeDir)%(Translate.FileName)">
      <Output TaskParameter="Include" ItemName="TasqueCleanFile" />
    </CreateItem>
    <CreateItem Condition=" '@(Substitute)' != '' " Include="%(Substitute.RelativeDir)%(Substitute.FileName)">
      <Output TaskParameter="Include" ItemName="TasqueCleanFile" />
    </CreateItem>
    <CreateItem Condition=" '@(GettextCompile)' != '' " Include="%(GettextCompile.FileName).gmo">
      <Output TaskParameter="Include" ItemName="TasqueCleanFile" />
    </CreateItem>
    <Delete Files="@(TasqueCleanFile)" />
  </Target>
  
  <!-- Install -->
  <PropertyGroup>
    <InstallDependsOn>
      BeforeInstall;
      _SetupBinInstallFile;
      _SetupDataInstallFile;
      _SetupPoInstallFile;
      SetupInstallFile;
      CoreInstall;
      _FixPermissions;
      AfterInstall;
      _UpdateIconCache;
    </InstallDependsOn>
  </PropertyGroup>
  <Target Name="Install" DependsOnTargets="$(InstallDependsOn)" />
  <Target Name="BeforeInstall" />
  <Target Name="AfterInstall" />
  <Target Name="CoreInstall">
    <Copy SourceFiles="@(InstallFile)" DestinationFiles="$(DestDir)%(InstallPath)\%(InstallFileName)" SkipUnchangedFiles="true" />
  </Target>
  
  <!-- Hook for consuming projects to register extra files for install -->
  <Target Name="SetupInstallFile" />
  
  <!-- Uninstall -->
  <PropertyGroup>
    <UninstallDependsOn>
      BeforeUninstall;
      _SetupBinInstallFile;
      _SetupDataInstallFile;
      _SetupPoInstallFile;
      SetupInstallFile;
      CoreUninstall;
      AfterUninstall;
      _UpdateIconCache;
    </UninstallDependsOn>
  </PropertyGroup>
  <Target Name="Uninstall" DependsOnTargets="$(UninstallDependsOn)" />
  <Target Name="BeforeUninstall" />
  <Target Name="AfterUninstall" />
  <Target Name="CoreUninstall">
    <Delete Files="$(DestDir)%(InstallFile.InstallPath)\%(InstallFileName)" />
  </Target>
  
  <!-- Dist -->
  <Target Name="Dist" DependsOnTargets="BeforeDist;_SetupDistFile;SetupDistFile;CoreDist;AfterDist" />
  <Target Name="BeforeDist" />
  <Target Name="AfterDist" />
  <Target Name="CoreDist" DependsOnTargets="_CheckAbsDistDir">
    <Copy Condition=" '@(DistFile)' != '' " SourceFiles="$(SrcDir)\%(DistFile.RelativeDir)%(FileName)%(Extension)"
        DestinationFiles="$(AbsDistDir)\$(_SrcDirStrip)\%(DistFile.RelativeDir)%(FileName)%(Extension)" SkipUnchangedFiles="true" />
  </Target>
  
  <!-- DistCheck -->
  <Target Name="DistCheck" />

  <!-- Hook for consuming projects to register extra files for dist -->
  <Target Name="SetupDistFile" />
  
  <!-- Distclean -->
  <Target Name="DistClean" DependsOnTargets="BeforeDistClean;CoreDistClean;AfterDistClean" />
  <Target Name="BeforeDistClean" />
  <Target Name="AfterDistClean" />
  <Target Name="CoreDistClean" DependsOnTargets="Clean;_CheckAbsDistDir">
    <Delete Files="$(AbsDistDir)\%(DistCleanFile.RelativeDir)%(FileName)%(Extension)" />
  </Target>
  
  <!-- Private -->  
  <Target Name="_CheckAbsDistDir">
    <Message Text="AbsDistDir=$(AbsDistDir)" />
    <Error Condition=" '$(AbsDistDir)' == '' " Text="Property AbsDistDir not set. Target Dist requires AbsDistDir to be set." />
  </Target>
  
  <Target Name="_SetupBinInstallFile">
    <Message Text="$(TargetFileName)" />
    <CreateItem Condition=" Exists('$(TargetFileName)') " Include="$(TargetFileName)" AdditionalMetadata="InstallPath=$(PkgLibDir);InstallFileName=$(TargetFileName)">
      <Output TaskParameter="Include" ItemName="_PreInstallFile" />
    </CreateItem>
    <CreateItem Condition=" '%(Extension)' != '.exe' " Include="@(_PreInstallFile)" AdditionalMetadata="Executable=false">
      <Output TaskParameter="Include" ItemName="InstallFile" />
    </CreateItem>
    <CreateItem Condition=" '%(Extension)' == '.exe' " Include="@(_PreInstallFile)" AdditionalMetadata="Executable=true">
      <Output TaskParameter="Include" ItemName="InstallFile" />
    </CreateItem>
    <CreateItem Condition="Exists('$(TargetFileName).mdb')" Include="$(TargetFileName).mdb"
        AdditionalMetadata="InstallPath=$(PkgLibDir);InstallFileName=$(TargetFileName).mdb;Executable=false">
      <Output TaskParameter="Include" ItemName="InstallFile" />
    </CreateItem>
  </Target>
  
  <Target Name="_SetupDataInstallFile">
    <CreateItem Condition=" '@(Icon)' != '' " Include="$(SrcDir)\%(Icon.Identity)"
        AdditionalMetadata="InstallPath=$(HiColorDir)\%(Size)\%(Context);InstallFileName=%(Name);Executable=false">
      <Output TaskParameter="Include" ItemName="InstallFile" />
    </CreateItem>
    <CreateItem Condition=" '@(PkgIcon)' != '' " Include="$(SrcDir)\%(PkgIcon.Identity)"
        AdditionalMetadata="InstallPath=$(PkgHiColorDir)\%(Size)\%(Context);InstallFileName=%(Name);Executable=false">
      <Output TaskParameter="Include" ItemName="InstallFile" />
    </CreateItem>
    <CreateItem Condition=" '@(Icon)' != '' And '%(Pixmaps)'" Include="$(SrcDir)\%(Icon.Identity)"
        AdditionalMetadata="InstallPath=$(PixmapDir);InstallFileName=%(FileName)%(Extension);Executable=false">
      <Output TaskParameter="Include" ItemName="InstallFile" />
    </CreateItem>
    <CreateItem Condition=" '@(PkgSound)' != '' " Include="$(SrcDir)\%(PkgSound.Identity)"
        AdditionalMetadata="InstallPath=$(PkgSoundsDir);InstallFileName=%(FileName)%(Extension);Executable=false">
      <Output TaskParameter="Include" ItemName="InstallFile" />
    </CreateItem>
  </Target>
  
  <Target Name="_SetupPoInstallFile" Condition=" '@(GettextCompile)' != '' ">
    <CreateItem Include="%(GettextCompile.FileName).gmo"
        AdditionalMetadata="InstallPath=$(LocaleDir)\%(GettextCompile.FileName)\LC_MESSAGES;InstallFileName=$(PackageName).mo;Executable=false" >
      <Output TaskParameter="Include" ItemName="InstallFile" />
    </CreateItem>
  </Target>
  
  <Target Name="_UpdateIconCache" Condition=" '@(Icon)' != '' Or '@(PkgIcon)' != '' ">
    <Exec Command="$(UpdateIconCache) -f -t $(HiColorDir)" IgnoreExitCode="true" />
    <Exec Command="$(UpdateIconCache) -f -t $(PkgHiColorDir)" IgnoreExitCode="true" />
  </Target>
  
  <Target Name="_FixPermissions" Condition=" '$(OS)' != 'Windows_NT' ">
    <Exec Condition=" Exists('$(DestDir)%(InstallFile.InstallPath)\%(InstallFileName)') And !'%(Executable)' "
        Command="chmod a-x $(DestDir)%(InstallPath)\%(InstallFileName)" />
  </Target>
  
  <Target Name="_SetupDistFile">
    <CreateItem Include="@(TasqueCompile);@(Icon);@(PkgIcon);@(PkgSound);@(GettextCompile);@(Translate);@(Substitute)">
      <Output TaskParameter="Include" ItemName="DistFile" />
    </CreateItem>
  </Target>
</Project>
