<Type Name="NativeApplication" FullName="Tasque.NativeApplication">
  <TypeSignature Language="C#" Value="public abstract class NativeApplication : Tasque.INativeApplication" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit NativeApplication extends System.Object implements class Tasque.INativeApplication" />
  <AssemblyInfo>
    <AssemblyName>libtasque</AssemblyName>
    <AssemblyVersion>0.1.10.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Tasque.INativeApplication</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>A common base class for all native applications.</summary>
    <remarks>This class can be used as a base class for various platform specific implementations of the Tasque application.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NativeApplication ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfDir">
      <MemberSignature Language="C#" Value="public abstract string ConfDir { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConfDir" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the file system directory which holds the application configuration file(s).</summary>
        <value>The path to the configuration directory.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit (int exitcode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Exit(int32 exitcode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exitcode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="exitcode">The exit code.</param>
        <summary>Exits the application with the specified exit code.</summary>
        <remarks>This method calls <see cref="M:Tasque.NativeApplication.OnExit(int)" /> and fires the <see cref="E:Tasque.NativeApplication.Exiting" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exiting">
      <MemberSignature Language="C#" Value="public event EventHandler Exiting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Exiting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the application is exiting.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public abstract void Initialize (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(string[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args">Arguments passed along with the command (passed through from <c>Main()</c>).</param>
        <summary>Initialize the native application.</summary>
        <remarks>Initialization should take place right after object creation. This method must only be called once. Subsequent calls are ignored.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeIdle">
      <MemberSignature Language="C#" Value="public virtual void InitializeIdle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeIdle() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Runs low priority initialization tasks.</summary>
        <remarks>This method is not called immediately after <see cref="M:Tasque.NativeApplication.Initialize(string[])" />, rather on a separate thread when the application main loop is running idle.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExit">
      <MemberSignature Language="C#" Value="protected virtual void OnExit (int exitCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExit(int32 exitCode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exitCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="exitCode">To be added.</param>
        <summary>Is called when the application exits.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenUrlInBrowser">
      <MemberSignature Language="C#" Value="public virtual void OpenUrlInBrowser (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OpenUrlInBrowser(string url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">The URL.</param>
        <summary>Opens a URL in a browser.</summary>
        <remarks>
          <para>
This method opens the system default browser and navigates to url.
</para>
          <block subset="none" type="note">
            <para>
    This method does not handle exceptions.
  </para>
          </block>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuitMainLoop">
      <MemberSignature Language="C#" Value="public abstract void QuitMainLoop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void QuitMainLoop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quits the main loop.</summary>
        <remarks>This method must be called after <see cref="M:Tasque.NativeApplication.StartMainLoop()" />. Otherwise it throws an exception. Calls to this method are ignored, if the main loop has already been quit.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartMainLoop">
      <MemberSignature Language="C#" Value="public abstract void StartMainLoop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartMainLoop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts the main loop.</summary>
        <remarks>This method must be called after <see cref="M:Tasque.NativeApplication.Initialize()" />. Otherwise it throws an exception. Subsequent calls to this method are ignored as long as <see cref="M:Tasque.NativeApplication.QuitMainLoop()" /> has not been called.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
